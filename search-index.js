var searchIndex = {};
searchIndex["libloading"] = {"doc":"A memory-safer wrapper around system dynamic library primitives.","items":[[3,"Library","libloading","A dynamically loaded library.",null,null],[3,"Symbol","","Symbol from a library.",null,null],[0,"os","","",null,null],[0,"unix","libloading::os","",null,null],[3,"Library","libloading::os::unix","A platform-specific equivalent of the cross-platform `Library`.",null,null],[3,"Symbol","","Symbol from a library.",null,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",0,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",0,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",0,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",0,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",0,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",0,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"new","libloading::os::unix","Find and load a shared library (module).",1,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"this","","Load the dynamic libraries linked into main program.",1,{"inputs":[],"output":{"name":"library"}}],[11,"get","","Get a symbol by name.",1,null],[11,"drop","","",1,{"inputs":[{"name":"library"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"library"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",2,{"inputs":[{"name":"symbol"}],"output":{"name":"t"}}],[11,"fmt","","",2,{"inputs":[{"name":"symbol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",3,{"inputs":[{"name":"nullerror"}],"output":{"name":"error"}}],[6,"Result","libloading","",null,null],[11,"new","","Find and load a shared library (module).",4,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"get","","Get a symbol by name.",4,null],[11,"fmt","","",4,{"inputs":[{"name":"library"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",5,{"inputs":[{"name":"symbol"}],"output":{"name":"t"}}],[11,"fmt","","",5,{"inputs":[{"name":"symbol"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Mutex"],[3,"Library"],[3,"Symbol"],[3,"Error"],[3,"Library"],[3,"Symbol"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",0,null],[10,"deref","","The method called to dereference a value",0,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[11,"get","","",1,{"inputs":[{"name":"lazy"},{"name":"f"}],"output":{"name":"t"}}],[14,"__lazy_static_create!","lazy_static","",null,null],[14,"lazy_static!","","",null,null]],"paths":[[8,"__Deref"],[3,"Lazy"]]};
initSearch(searchIndex);
